name: Update Menu from TXT

on:
  push:
    paths:
      - 'menu.txt'
  workflow_dispatch:

jobs:
  update-menu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Convert menu.txt to HTML
        run: |
          node << 'EOF'
          const fs = require('fs');
          
          // menu.txt 읽기
          const menuData = fs.readFileSync('menu.txt', 'utf8');
          const lines = menuData.split('\n').filter(line => 
            line.trim() && !line.startsWith('#')
          );
          
          // 메뉴 파싱
          const menuItems = lines.map(line => {
            const [category, name, description, price, image, tags] = line.split('|');
            return {
              category: category?.trim(),
              name: name?.trim(),
              description: description?.trim(),
              price: parseInt(price?.trim()) || 0,
              image: image?.trim(),
              tags: tags?.trim()?.split(',').map(t => t.trim()) || []
            };
          }).filter(item => item.category && item.name);
          
          // HTML 템플릿 생성
          const htmlTemplate = `<!doctype html>
<html lang="ko">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>바샤커피 메뉴판</title>
  <style>
    :root{
      --bg: #0b0c0f; --card: #151821; --muted: #a7b0c0; --text: #e6eaf2;
      --brand: #ffb703; --brand-2: #ff7a59; --ring: 0 0 0 3px rgba(255,183,3,.25);
      --shadow: 0 10px 30px rgba(0,0,0,.25); --success: #10b981; --warning: #f59e0b; --error: #ef4444;
    }
    @media (prefers-color-scheme: light){
      :root{
        --bg: #f4f6fb; --card: #ffffff; --muted: #5a6577; --text: #0b0c0f;
        --brand: #e18f00; --brand-2: #e85d3f; --ring: 0 0 0 3px rgba(225,143,0,.20);
        --shadow: 0 10px 25px rgba(0,0,0,.08);
      }
    }
    *{box-sizing:border-box} html,body{height:100%}
    body{
      margin:0; font-family: system-ui, -apple-system, "Segoe UI", Roboto, "Noto Sans KR", sans-serif;
      background: radial-gradient(1200px 800px at 80% -10%, rgba(255,183,3,.10), transparent 60%), var(--bg);
      color:var(--text);
    }
    .container{max-width:1100px;margin:0 auto;padding:24px}
    header{position:sticky; top:0; z-index:10; backdrop-filter:saturate(180%) blur(8px);}
    .header-inner{display:flex;gap:16px;align-items:center; justify-content:space-between; padding:16px 24px}
    .brand{display:flex;align-items:center; gap:12px}
    .logo{width:36px;height:36px;border-radius:12px;background:linear-gradient(135deg,var(--brand),var(--brand-2));}
    .title{font-size: clamp(18px, 2.2vw, 28px); font-weight:800;}
    .actions{display:flex; gap:8px; align-items:center}
    .search{padding:8px 12px; border:1px solid rgba(255,255,255,.1); border-radius:8px; background:var(--card); color:var(--text);}
    .filter-tabs{display:flex; gap:8px; margin:16px 0; flex-wrap:wrap}
    .tab{padding:8px 16px; border:1px solid rgba(255,255,255,.1); border-radius:20px; background:var(--card); cursor:pointer; transition:all .2s}
    .tab.active{background:var(--brand); color:var(--bg)}
    .menu-grid{display:grid; grid-template-columns:repeat(auto-fill,minmax(320px,1fr)); gap:20px; margin-top:24px}
    .menu-item{background:var(--card); border-radius:12px; overflow:hidden; transition:transform .2s; border:1px solid rgba(255,255,255,.05)}
    .menu-item:hover{transform:translateY(-2px)}
    .item-image{width:100%; height:200px; object-fit:cover; background:#333}
    .item-content{padding:16px}
    .item-name{font-size:16px; font-weight:600; margin-bottom:8px}
    .item-description{color:var(--muted); font-size:14px; margin-bottom:12px; line-height:1.4}
    .item-footer{display:flex; justify-content:space-between; align-items:center}
    .item-price{font-weight:700; color:var(--brand); font-size:16px}
    .item-category{font-size:12px; color:var(--muted); background:rgba(255,255,255,.05); padding:4px 8px; border-radius:4px}
    .stats{display:grid; grid-template-columns:repeat(auto-fit,minmax(200px,1fr)); gap:16px; margin:24px 0}
    .stat-card{background:var(--card); padding:16px; border-radius:8px; text-align:center}
    .stat-number{font-size:24px; font-weight:700; color:var(--brand)}
    .stat-label{color:var(--muted); font-size:14px; margin-top:4px}
  </style>
</head>
<body>
  <div class="container">
    <header>
      <div class="header-inner">
        <div class="brand">
          <div class="logo"></div>
          <h1 class="title">바샤커피 메뉴판</h1>
        </div>
        <div class="actions">
          <input type="text" class="search" placeholder="메뉴 검색..." id="searchInput">
        </div>
      </div>
    </header>

    <main>
      <div class="stats">
        <div class="stat-card">
          <div class="stat-number">${menuItems.length}</div>
          <div class="stat-label">총 메뉴</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">${new Set(menuItems.map(item => item.category)).size}</div>
          <div class="stat-label">카테고리</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">${Math.min(...menuItems.map(item => item.price)).toLocaleString()}원</div>
          <div class="stat-label">최저가</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">${Math.max(...menuItems.map(item => item.price)).toLocaleString()}원</div>
          <div class="stat-label">최고가</div>
        </div>
      </div>

      <div class="filter-tabs">
        <button class="tab active" data-category="all">전체</button>
        ${[...new Set(menuItems.map(item => item.category))].map(cat => 
          `<button class="tab" data-category="${cat}">${cat}</button>`
        ).join('')}
      </div>

      <div class="menu-grid" id="menuGrid">
        ${menuItems.map(item => `
          <div class="menu-item" data-category="${item.category}" data-name="${item.name.toLowerCase()}" data-tags="${item.tags.join(' ').toLowerCase()}">
            <img src="${item.image}" alt="${item.name}" class="item-image" loading="lazy" 
                 onerror="this.style.display='none'; this.nextElementSibling.style.height='120px'">
            <div class="item-content">
              <h3 class="item-name">${item.name}</h3>
              <p class="item-description">${item.description}</p>
              <div class="item-footer">
                <span class="item-price">${item.price.toLocaleString()}원</span>
                <span class="item-category">${item.category}</span>
              </div>
            </div>
          </div>
        `).join('')}
      </div>
    </main>
  </div>

  <script>
    // 검색 기능
    const searchInput = document.getElementById('searchInput');
    const menuGrid = document.getElementById('menuGrid');
    const tabs = document.querySelectorAll('.tab');
    
    let currentCategory = 'all';
    
    function filterMenu() {
      const searchTerm = searchInput.value.toLowerCase();
      const items = menuGrid.querySelectorAll('.menu-item');
      
      items.forEach(item => {
        const matchesCategory = currentCategory === 'all' || item.dataset.category === currentCategory;
        const matchesSearch = searchTerm === '' || 
          item.dataset.name.includes(searchTerm) || 
          item.dataset.tags.includes(searchTerm);
        
        item.style.display = matchesCategory && matchesSearch ? 'block' : 'none';
      });
    }
    
    searchInput.addEventListener('input', filterMenu);
    
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        tabs.forEach(t => t.classList.remove('active'));
        tab.classList.add('active');
        currentCategory = tab.dataset.category;
        filterMenu();
      });
    });
  </script>
</body>
</html>`;
          
          // index.html 생성
          fs.writeFileSync('index.html', htmlTemplate);
          console.log('✅ index.html이 성공적으로 생성되었습니다!');
          EOF
          
      - name: Commit updated HTML
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add index.html
          git commit -m "🔄 menu.txt 변경에 따른 자동 HTML 업데이트" || exit 0
          git push